SELECT P_PHONE FROM PARENT_PHONE WHERE SRN="A1";
DELETE FROM STUDENT WHERE SRN="A1";
SELECT * FROM PARENT_ADDRESS;
SELECT * FROM PARENT_PHONE;

/* A5 AND A10 HAVE SAME PARENT OR LG */

SELECT P_PHONE FROM PARENT_PHONE WHERE SRN="A5";
DELETE FROM STUDENT WHERE SRN="A5";
SELECT * FROM PARENT_ADDRESS;
SELECT * FROM PARENT_PHONE;

/* WRONG INSERTIONS */

/* wrong dept*/
INSERT INTO STUDENT VALUES("A1","LARRY","PAGE","CS","2","LARRYPAGE@GMAIL.COM",'9567312233','1999-05-06',"10000");
/* NOT ENTERING PHONE NO*/
INSERT INTO STUDENT VALUES("A1","LARRY","PAGE","CS","2","LARRYPAGE@GMAIL.COM",'NULL','1999-05-06',"10000");

/* correct insertion */

INSERT INTO STUDENT VALUES("A1","LARRY","PAGE","COMPUTER SCIENCE","2","LARRYPAGE@GMAIL.COM",'9567312233','1999-05-06',"10000");
/* IF WITHOUT ENTERING PARENT AND LG DETAILS IF WE TRY TO ENTER INTO LIVES_IN */
INSERT INTO LIVES_IN VALUES("A1","1","2","101");
/* now enter parent and lg details */
INSERT INTO LG_ADDRESS VALUES
(9827996375,"holly", "G","NO 2,ISLA TOWERS,WHITEFIELD,BANGALORE","holly@gmail.com","aunt");
INSERT INTO LG_PHONE VALUES
("A1",9827996375);
INSERT INTO PARENT_ADDRESS VALUES
(9824996375,"Priya","Page","NO 6,SUP APARTMENTS,DELHI","priya@gmail.com");
INSERT INTO PARENT_PHONE VALUES
("A1",9824996375);

SELECT * FROM LIVES_IN WHERE ROOM_NO="102" AND UNIT_NO="1";
/* WE SEE THAT ROOM_NO 102 IS FULL */
INSERT INTO LIVES_IN VALUES("A1","1","2","102");

/*INSERT INTO ROOM WHICH IS NOT FOR THAT UNIT AND SEATER */

INSERT INTO LIVES_IN VALUES("A1","1","2","89");
/* INSERT INTO LIVES_IN PROPER VALUES */

INSERT INTO LIVES_IN VALUES("A1","1","2","101");
SELECT * FROM LIVES_IN;

USE TWO

UPDATE lg_address,lg_phone
SET lg_address.lgaddress = "sike"
WHERE lg_address.lphone = lg_phone.lphone
AND lg_phone.SRN="A2";

SELECT COUNT(STUDENT.SRN)
FROM STUDENT INNER JOIN
LIVES_IN
WHERE STUDENT.SRN=LIVES_IN.SRN AND STUDENT.DEPT="COMPUTER SCIENCE" AND LIVES_IN.UNIT_NO="1";



select S.SRN,S.UNIT_NO,S.ROOM_NO
from LIVES_IN s, LG_ADDRESS b, LG_PHONE c
where S.SRN = C.SRN and b.lphone = c.lphone and b.lgaddress like '%WHITEFIELD%';

SELECT S.SRN,S.UNIT_NO,S.ROOM_NO
FROM LIVES_IN s
    INNER JOIN LG_PHONE c ON S.SRN  = C.SRN 
    INNER JOIN LG_ADDRESS b ON b.lphone = c.lphone and b.lgaddress like '%WHITEFIELD%'
ORDER BY S.SRN ;

SELECT COUNT(S.SRN)
FROM LIVES_IN s
    INNER JOIN LG_PHONE c ON S.SRN  = C.SRN 
    INNER JOIN LG_ADDRESS b ON b.lphone = c.lphone and b.lgaddress like '%WHITEFIELD%'
ORDER BY S.SRN ;


SELECT S.SFNAME,S.SLNAME,T.UNIT_NO,T.ROOM_NO
FROM STUDENT S
INNER JOIN LIVES_IN T ON S.SRN=T.SRN
INNER JOIN LG_PHONE L ON L.SRN=T.SRN
INNER JOIN LG_ADDRESS Q ON Q.LPHONE=L.LPHONE
INNER JOIN PARENT_PHONE P ON Q.LPHONE=P.P_PHONE;

UPDATE parent_address,parent_phone
SET parent_address.p_address = "sike"
WHERE parent_address.p_phone = parent_phone.p_phone
AND parent_phone.SRN="A2";

GET DETAILS OF STUDENTS WHO GAVE BOTH  PARENTS DETAILS
SELECT STUDENT.SRN,STUDENT.SFNAME,STUDENT.SLNAME,STUDENT.S_PHONE 
FROM STUDENT WHERE STUDENT.SRN IN
(SELECT E.SRN FROM PARENT_PHONE E
INNER JOIN PARENT_PHONE F ON E.SRN=F.SRN
WHERE E.P_PHONE>F.P_PHONE);
OPPOSITE
SELECT STUDENT.SRN,STUDENT.SFNAME,STUDENT.SLNAME,STUDENT.S_PHONE 
FROM STUDENT WHERE STUDENT.SRN NOT IN
(SELECT E.SRN FROM PARENT_PHONE E
INNER JOIN PARENT_PHONE F ON E.SRN=F.SRN
WHERE E.P_PHONE>F.P_PHONE);

STUDENTS WHO HAVE SAME LG
SELECT STUDENT.SRN,STUDENT.SFNAME,STUDENT.SLNAME,STUDENT.S_PHONE 
FROM STUDENT WHERE STUDENT.SRN IN
(SELECT E.SRN FROM LG_PHONE E
INNER JOIN LG_PHONE F ON E.LPHONE=F.LPHONE
WHERE E.SRN<>F.SRN);

SELECT S.SFNAME,S.S_EMAIL 
FROM STUDENT S
INNER JOIN LIVES_IN L ON S.SRN=L.SRN WHERE L.SEATER="1";

SELECT AVG(STUDENT.FEES_PAID)
FROM STUDENT,LIVES_IN
WHERE UNIT_NO="1";



SELECT COUNT(S.SRN)
FROM LIVES_IN s
    INNER JOIN LG_PHONE c ON S.SRN  = C.SRN 
    INNER JOIN LG_ADDRESS b ON b.lphone = c.lphone
     and b.lgaddress like '%SIKE%';


delimiter //
CREATE TRIGGER tr_warden BEFORE INSERT ON warden
       FOR EACH ROW
       BEGIN
           declare lq int;
           
           SELECT count(Wphone) FROM WARDEN WHERE WARDEN.UNIT_NO=NEW.UNIT_NO INTO LQ;
           IF LQ=3 THEN
               SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ALREADY 3 WARDENS ARE THERE';
           END IF;
       END;//
delimiter ;


delimiter //
CREATE TRIGGER tr_email BEFORE INSERT ON STUDENT
       FOR EACH ROW
       BEGIN
           IF new.s_email not like '%@gmail.com' THEN
               SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'incorrect email';
           END IF;
       END;//
delimiter ;
